<?php

namespace Hydrators;

use Doctrine\ODM\MongoDB\DocumentManager;
use Doctrine\ODM\MongoDB\Mapping\ClassMetadata;
use Doctrine\ODM\MongoDB\Hydrator\HydratorInterface;
use Doctrine\ODM\MongoDB\UnitOfWork;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ODM. DO NOT EDIT THIS FILE.
 */
class EntityImageHydrator implements HydratorInterface
{
    private $dm;
    private $unitOfWork;
    private $class;

    public function __construct(DocumentManager $dm, UnitOfWork $uow, ClassMetadata $class)
    {
        $this->dm = $dm;
        $this->unitOfWork = $uow;
        $this->class = $class;
    }

    public function hydrate($document, $data, array $hints = array())
    {
        $hydratedData = array();

        /** @Field(type="id") */
        if (isset($data['_id'])) {
            $value = $data['_id'];
            $return = $value instanceof \MongoId ? (string) $value : $value;
            $this->class->reflFields['id']->setValue($document, $return);
            $hydratedData['id'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['title'])) {
            $value = $data['title'];
            $return = (string) $value;
            $this->class->reflFields['title']->setValue($document, $return);
            $hydratedData['title'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['description'])) {
            $value = $data['description'];
            $return = (string) $value;
            $this->class->reflFields['description']->setValue($document, $return);
            $hydratedData['description'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['createdAt'])) {
            $value = $data['createdAt'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } elseif ($value instanceof \DateTime) { $return = $value; } else { $return = new \DateTime($value); }
            $this->class->reflFields['createdAt']->setValue($document, clone $return);
            $hydratedData['createdAt'] = $return;
        }

        /** @Field(type="date") */
        if (isset($data['updatedAt'])) {
            $value = $data['updatedAt'];
            if ($value instanceof \MongoDate) { $return = new \DateTime(); $return->setTimestamp($value->sec); } elseif (is_numeric($value)) { $return = new \DateTime(); $return->setTimestamp($value); } elseif ($value instanceof \DateTime) { $return = $value; } else { $return = new \DateTime($value); }
            $this->class->reflFields['updatedAt']->setValue($document, clone $return);
            $hydratedData['updatedAt'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['owner'])) {
            $reference = $data['owner'];
            if (isset($this->class->fieldMappings['owner']['simple']) && $this->class->fieldMappings['owner']['simple']) {
                $className = $this->class->fieldMappings['owner']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['owner'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['owner']->setValue($document, $return);
            $hydratedData['owner'] = $return;
        }

        /** @Field(type="file") */
        if (isset($data['file'])) {
            $value = $data['file'];
            $return = $value;
            $this->class->reflFields['file']->setValue($document, $return);
            $hydratedData['file'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['filename'])) {
            $value = $data['filename'];
            $return = (string) $value;
            $this->class->reflFields['filename']->setValue($document, $return);
            $hydratedData['filename'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['basename'])) {
            $value = $data['basename'];
            $return = (string) $value;
            $this->class->reflFields['basename']->setValue($document, $return);
            $hydratedData['basename'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['mimeType'])) {
            $value = $data['mimeType'];
            $return = (string) $value;
            $this->class->reflFields['mimeType']->setValue($document, $return);
            $hydratedData['mimeType'] = $return;
        }

        /** @ReferenceOne */
        if (isset($data['project'])) {
            $reference = $data['project'];
            if (isset($this->class->fieldMappings['project']['simple']) && $this->class->fieldMappings['project']['simple']) {
                $className = $this->class->fieldMappings['project']['targetDocument'];
                $mongoId = $reference;
            } else {
                $className = $this->unitOfWork->getClassNameForAssociation($this->class->fieldMappings['project'], $reference);
                $mongoId = $reference['$id'];
            }
            $targetMetadata = $this->dm->getClassMetadata($className);
            $id = $targetMetadata->getPHPIdentifierValue($mongoId);
            $return = $this->dm->getReference($className, $id);
            $this->class->reflFields['project']->setValue($document, $return);
            $hydratedData['project'] = $return;
        }

        /** @Field(type="string") */
        if (isset($data['md5'])) {
            $value = $data['md5'];
            $return = (string) $value;
            $this->class->reflFields['md5']->setValue($document, $return);
            $hydratedData['md5'] = $return;
        }
        return $hydratedData;
    }
}